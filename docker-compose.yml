# You must include a `.env` file with the following content:
#   MYSQL_ROOT_PASSWORD=chooseapassword
#   MYSQL_PASSWORD=chooseapassword
#   MYSQL_HOST=chooseahost
#   PHP_DEBUG=1 or 0

version: '3.7'

networks:
    frontend:
        name: frontend
        external: false
    backend:
        name: backend
        external: false

# Base configuration for `smr` (production) and `smr-dev` (testing).
x-smr-common: &smr-common
    build:
        context: .
        args:
            - PHP_DEBUG
    container_name: ${SMR_HOST}
    networks:
        - frontend
        - backend
    labels:
        - "traefik.enable=true"
        - "traefik.http.routers.${SMR_HOST}.rule=${SMR_RULE:-PathPrefix(`/`)}"
    depends_on:
        - mysql
        - smtp
    volumes:
        - ./vol_upload:/smr/htdocs/upload
        - ./config:/smr/config:ro
        - ./.env:/smr/.env:ro

# Base configuration for the SMR command line tools
x-smr-cli: &smr-cli
    build:
        context: .
        args:
            - PHP_DEBUG
    networks:
        - backend
    depends_on:
        - mysql
        - smtp
    volumes:
        - ./config:/smr/config:ro
        - ./.env:/smr/.env:ro

x-mysql-common: &mysql-common
    image: mysql:8.0
    container_name: ${MYSQL_HOST}
    networks:
        - backend
    # By using the default image, we must expose the secrets in
    # the runtime environment (because we can't specify build args).
    environment:
        - MYSQL_ROOT_PASSWORD
        - MYSQL_USER
        - MYSQL_PASSWORD
        - MYSQL_DATABASE
    # The mysql:5.7+ docker default sql mode uses STRICT_TRANS_TABLES,
    # which is incompatible with the way the SMR database is used.
    # Therefore, we override CMD to omit this sql mode.
    command: [ "mysqld", "--sql-mode=NO_ENGINE_SUBSTITUTION",
               "--character-set-server=utf8",
               "--collation-server=utf8_general_ci" ]

services:
    smr:
        <<: *smr-common

    smr-dev:
        <<: *smr-common
        volumes:
            - ./vol_upload:/smr/htdocs/upload
            - ./config:/smr/config:ro
            - ./.env:/smr/.env:ro
            # Mount the source code instead of copying it.
            - ./admin:/smr/admin
            - ./engine:/smr/engine
            - ./htdocs:/smr/htdocs
            - ./lib:/smr/lib
            - ./templates:/smr/templates
        environment:
            DISABLE_PHPDI_COMPILATION: "true"

    smtp:
        image: hemberger/postfix-relay
        networks:
            - backend
        environment:
            - POSTFIX_myhostname=hostname.local
            - OPENDKIM_DOMAINS=smrealms.de=key1
        volumes:
            - ./opendkim:/etc/opendkim/keys/smrealms.de

    flyway: &flyway-common
        image: boxfuse/flyway:latest-alpine
        command: -url=jdbc:mysql://${MYSQL_HOST}/${MYSQL_DATABASE}?allowPublicKeyRetrieval=true&useSSL=false -user=${MYSQL_USER} -password=${MYSQL_PASSWORD} migrate
        networks:
            - backend
        depends_on:
            - mysql
        volumes:
            - ./db/patches:/flyway/sql:ro

    flyway-integration-test:
        <<: *flyway-common
        depends_on:
            - mysql-integration-test

    mysql:
        <<: *mysql-common
        volumes:
            - ./vol_db:/var/lib/mysql

    # MySQL container with no volumes mounted for testing
    mysql-integration-test:
        <<: *mysql-common

    smr-integration-test:
        <<: *smr-common
        command: /smr/vendor/bin/phpunit test
        volumes:
            - ./config:/smr/config:ro
            - ./test.env:/smr/.env:ro
            - ./phpunit.xml:/smr/phpunit.xml
            # Mount the source code instead of copying it.
            - ./admin:/smr/admin
            - ./engine:/smr/engine
            - ./htdocs:/smr/htdocs
            - ./lib:/smr/lib
            - ./templates:/smr/templates
            - ./test:/smr/test
            - ./tools:/smr/tools
        depends_on:
            - mysql-integration-test
        labels:
            - "traefik.enable=false"

    pma:
        image: phpmyadmin/phpmyadmin
        networks:
            - frontend
            - backend
        environment:
            PMA_HOST: ${MYSQL_HOST}
            PMA_ABSOLUTE_URI: /pma/
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.pma-${MYSQL_HOST}.rule=PathPrefix(`/pma`)"
            - "traefik.http.routers.pma-${MYSQL_HOST}.middlewares=slash-then-strip@file"
        depends_on:
            - mysql

    discord:
        command: php tools/discord/bot.php
        <<: *smr-cli

    irc:
        command: php tools/irc/irc.php
        <<: *smr-cli

    npc:
        command: php tools/npc/npc.php
        <<: *smr-cli

    traefik:
        image: traefik:2.3
        networks:
            - frontend
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - ./traefik:/etc/traefik
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.traefik.rule=PathPrefix(`/api`) || PathPrefix(`/dashboard`)"
            - "traefik.http.routers.traefik.service=api@internal"
            - "traefik.http.routers.traefik.middlewares=add-slash@file"
        ports:
            - "80:80"
            - "443:443"

    # Generate rich API documentation of the SMR source code.
    api-docs:
        build:
            context: .
            dockerfile: ./api-docs/Dockerfile
        networks:
            - frontend
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.api-docs.rule=PathPrefix(`/docs`)"
            - "traefik.http.routers.api-docs.middlewares=slash-then-strip@file"

    # Web interface for managing Docker services
    portainer:
        image: portainer/portainer-ce
        networks:
            - frontend
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.portainer.rule=PathPrefix(`/docker`)"
            - "traefik.http.routers.portainer.middlewares=slash-then-strip@file"
            - "traefik.http.services.portainer.loadbalancer.server.port=9000"
        command: -H unix:///var/run/docker.sock
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - ./vol_portainer:/data
