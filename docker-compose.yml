version: '3.7'

networks:
    frontend:
        name: frontend
        external: false
    backend:
        name: backend
        external: false

# Builds a local smr image for use in other services
x-smr-builder: &smr-builder
    build:
        context: .
        args:
            - NO_DEV
    image: local/smr

# Base configuration for `smr` (production) and `smr-dev` (testing).
x-smr-common: &smr-common
    <<: *smr-builder
    container_name: ${SMR_HOST}
    networks:
        - frontend
        - backend
    labels:
        - "traefik.enable=true"
        - "traefik.http.routers.${SMR_HOST}.rule=${SMR_RULE:-PathPrefix(`/`)}"
    depends_on:
        - mysql
        - smtp

# Base configuration for the SMR command line tools
x-smr-cli: &smr-cli
    <<: *smr-builder
    networks:
        - backend
    depends_on:
        - mysql
        - smtp
    volumes:
        - ./config:/smr/config:ro
        # Mount the source code instead of copying it.
        - ./src:/smr/src:ro

# Base configuration for SMR testing tools
x-smr-test: &smr-test
    <<: *smr-cli
    # Allow the process to be interruptible with SIGINT.
    # Note that this may corrupt the test database and require a reset.
    # (see https://github.com/docker-library/php/issues/505)
    init: true
    volumes:
        - ./config/config.specific.sample.php:/smr/config/config.specific.php:ro
        - ./test/env:/smr/config/env:ro
        - ./phpunit.xml:/smr/phpunit.xml:ro
        - ./phpstan.neon.dist:/smr/phpstan.neon.dist:ro
        - ./phpcs.xml:/smr/phpcs.xml:ro
        # Mount the source code instead of copying it.
        - ./src:/smr/src:rw
        - ./test:/smr/test:rw
    depends_on:
        - mysql-integration-test

x-mysql-common: &mysql-common
    image: mysql:8.0
    container_name: ${MYSQL_HOST}
    networks:
        - backend
    # By using the default image, we must expose the secrets in
    # the runtime environment (because we can't specify build args).
    environment:
        - MYSQL_ROOT_PASSWORD
        - MYSQL_USER
        - MYSQL_PASSWORD
        - MYSQL_DATABASE
    # The mysql:5.7+ docker default sql mode uses STRICT_TRANS_TABLES,
    # which is incompatible with the way the SMR database is used.
    # Therefore, we override CMD to omit this sql mode.
    command: [ "mysqld", "--sql-mode=NO_ENGINE_SUBSTITUTION",
               "--character-set-server=utf8",
               "--collation-server=utf8_general_ci" ]

services:
    smr:
        <<: *smr-common
        volumes:
            - ./vol_upload:/smr/src/htdocs/upload:rw
            - ./config:/smr/config:ro
        environment:
            - XDEBUG_MODE

    smr-dev:
        <<: *smr-common
        volumes:
            - ./vol_upload:/smr/src/htdocs/upload:rw
            - ./config:/smr/config:ro
            # Mount the source code instead of copying it.
            - ./src:/smr/src:ro
            # Directory for Xdebug profiler output
            - ./vol_xdebug:/tmp/xdebug:rw
        environment:
            - XDEBUG_MODE
            - DISABLE_PHPDI_COMPILATION=true

    smtp:
        image: mwader/postfix-relay
        networks:
            - backend
        environment:
            - POSTFIX_myhostname=hostname.local
            - OPENDKIM_DOMAINS=smrealms.de=key1
        volumes:
            - ./opendkim:/etc/opendkim/keys/smrealms.de:ro

    flyway: &flyway-common
        image: flyway/flyway:latest-alpine
        # Allow retries in case the mysql service is still spinning up
        command: -connectRetries=20 -url=jdbc:mysql://${MYSQL_HOST}/${MYSQL_DATABASE}?allowPublicKeyRetrieval=true&useSSL=false -user=${MYSQL_USER} -password=${MYSQL_PASSWORD} migrate
        networks:
            - backend
        depends_on:
            - mysql
        volumes:
            - ./db/patches:/flyway/sql:ro

    flyway-integration-test:
        <<: *flyway-common
        depends_on:
            - mysql-integration-test

    mysql:
        <<: *mysql-common
        volumes:
            - ./vol_db:/var/lib/mysql:rw

    # MySQL container with no volumes mounted for testing
    mysql-integration-test:
        <<: *mysql-common

    smr-integration-test:
        <<: *smr-test
        entrypoint: vendor/bin/phpunit
        environment:
            - XDEBUG_MODE=coverage

    phpstan:
        <<: *smr-test
        entrypoint: vendor/bin/phpstan --memory-limit=4G --ansi analyse

    phpcs:
        <<: *smr-test
        entrypoint: vendor/bin/phpcs --report-code --report-source

    phpcbf:
        <<: *smr-test
        entrypoint: vendor/bin/phpcbf

    pma:
        image: phpmyadmin/phpmyadmin
        networks:
            - frontend
            - backend
        environment:
            PMA_HOST: ${MYSQL_HOST}
            PMA_ABSOLUTE_URI: /pma/
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.pma-${MYSQL_HOST}.rule=${SMR_RULE:-PathPrefix(`/`)} && PathPrefix(`/pma`)"
            - "traefik.http.routers.pma-${MYSQL_HOST}.middlewares=slash-then-strip@file"
        depends_on:
            - mysql

    discord:
        command: php src/tools/discord/bot.php
        <<: *smr-cli

    irc:
        command: php src/tools/irc/irc.php
        <<: *smr-cli

    npc:
        command: php src/tools/npc/npc.php
        <<: *smr-cli

    traefik:
        image: traefik:2.6
        networks:
            - frontend
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - ./traefik:/etc/traefik:ro
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.traefik.rule=PathPrefix(`/api`) || PathPrefix(`/dashboard`)"
            - "traefik.http.routers.traefik.service=api@internal"
            - "traefik.http.routers.traefik.middlewares=add-slash@file"
        ports:
            - "80:80"
            - "443:443"

    # Generate rich API documentation of the SMR source code.
    api-docs:
        build:
            context: .
            dockerfile: ./api-docs/Dockerfile
        networks:
            - frontend
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.api-docs.rule=PathPrefix(`/docs`)"
            - "traefik.http.routers.api-docs.middlewares=slash-then-strip@file"

    # Web interface for managing Docker services
    portainer:
        image: portainer/portainer-ce
        networks:
            - frontend
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.portainer.rule=PathPrefix(`/docker`)"
            - "traefik.http.routers.portainer.middlewares=slash-then-strip@file"
            - "traefik.http.services.portainer.loadbalancer.server.port=9000"
        command: -H unix:///var/run/docker.sock
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - ./vol_portainer:/data:rw

    # Web interface to display Xdebug profiler results
    webgrind:
        image: jokkedk/webgrind
        networks:
            - frontend
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.webgrind.rule=PathPrefix(`/webgrind`)"
            - "traefik.http.routers.webgrind.middlewares=slash-then-strip@file"
        volumes:
            # Webgrind looks for Xdebug profiler files in /tmp by default
            - ./vol_xdebug:/tmp:rw
            # Files mapped under /host will be available for code lookup
            - ./src:/host/smr/src:ro
