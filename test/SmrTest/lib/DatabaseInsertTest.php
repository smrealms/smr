<?php declare(strict_types=1);

namespace SmrTest\lib;

use Doctrine\DBAL\Exception\DriverException;
use PHPUnit\Framework\Attributes\CoversClass;
use PHPUnit\Framework\TestCase;
use Smr\Database;

/**
 * This is an extension of DatabaseIntegrationTest. It is separate due to the
 * need for specific setUp and tearDown functions (which we do not want to use
 * for every other DatabaseIntegrationTest method).
 */
#[CoversClass(Database::class)]
class DatabaseInsertTest extends TestCase {

	protected function setUp(): void {
		// Create temporary tables
		$db = Database::getInstance();
		$db->write('CREATE TABLE `test1` (`var` text DEFAULT NULL)');
		$db->write('CREATE TABLE `test2` (`id` int NOT NULL AUTO_INCREMENT, `var` text DEFAULT NULL, PRIMARY KEY (`id`))');
	}

	protected function tearDown(): void {
		// Remove temporary tables
		$db = Database::getInstance();
		$db->write('DROP TABLE test1');
		$db->write('DROP TABLE test2');
	}

	public function test_insertAutoIncrement_no_auto_increment_column(): void {
		// Expect doctrine exception if table does not have an auto-increment column
		$db = Database::getInstance();
		$this->expectException(DriverException::class);
		$this->expectExceptionMessage('No identity value was generated by the last statement.');
		$db->insertAutoIncrement('test1', []);
	}

	public function test_insertAutoIncrement(): void {
		$db = Database::getInstance();

		// Non-zero insert ID when table has an auto-increment column
		for ($i = 1; $i <= 3; $i++) {
			self::assertSame($i, $db->insertAutoIncrement('test2', []));
		}

		// Non-empty fields are successfully recovered
		$logID = $db->insertAutoIncrement('test2', [
			'var' => 'foo',
		]);
		$result = $db->read('SELECT * FROM test2 WHERE id = :id', [
			'id' => $logID,
		]);
		self::assertSame('foo', $result->record()->getString('var'));
	}

	public function test_replaceAutoIncrement_no_auto_increment_column(): void {
		// Expect doctrine exception if table does not have an auto-increment column
		$db = Database::getInstance();
		$this->expectException(DriverException::class);
		$this->expectExceptionMessage('No identity value was generated by the last statement.');
		$db->replaceAutoIncrement('test1', []);
	}

	public function test_replaceAutoIncrement(): void {
		$db = Database::getInstance();

		// Non-zero insert ID when table has an auto-increment column
		for ($i = 1; $i <= 3; $i++) {
			self::assertSame($i, $db->replaceAutoIncrement('test2', []));
		}

		// Replacing an existing row returns that row as the insert ID
		$logID = $db->replaceAutoIncrement('test2', [
			'id' => 2,
			'var' => 'foo',
		]);
		self::assertSame(2, $logID);

		// Non-empty fields are successfully recovered
		$result = $db->read('SELECT * FROM test2 WHERE id = :id', [
			'id' => $logID,
		]);
		self::assertSame('foo', $result->record()->getString('var'));
	}

}
